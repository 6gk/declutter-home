* Dotfiles - Origin and History
Believe it or not, the origin of dotfiles is due to a bug in
=ls= [1]. Unix creators wanted =ls= to hide =.= and =..= but due
to a bug in =ls=, it hid all the files and directories starting with a dot.
Many people exploited this bug and it became a "feature".
** Side note
As a side note, in Plan 9, dotfiles were completely removed and replaced
by a sane alternative. Every configuration file (and other files you would hide)
in Plan 9 would be stored in =$HOME/lib= akin to =$HOME/.config=.
* Be happy
Be happy that you're living in 2019 because before freedesktop came along,
every software's configuration file would be a dotfile in the home directory.
As an example, take =larswm= [2]; it's configuration file is
=$HOME/.larswmrc= but most software, however, seemed to have a flag
to specify a configuration file. Although this is a nice feature, it is still
quite ugly to have these around in your scripts.
** Or should you be?
Now, most modern software do follow the XDG env vars but some of them will
never do (like firefox). Funnily enough, even some of the Freedesktop's software
(take dbus) doesn't follow XDG env vars which is quite ironic.

Don't worry much though because most of these can be worked around using some
tricks and practices.
* Env vars
A lot of Unix tools is notorious for creating dotfiles and cluttering your
home directory (wget, less for example). But most of these read an env var
that points to the path of the configuration file. Some of these and their
env var will be listed below for your benefit. If something that you use
isn't here, check the man page. I found almost all of these
simply by searching the man page.

| Tool          | Env var                       |
|---------------+-------------------------------|
| less          | =LESSHISTFILE=                |
| gnupg         | =GNUPGHOME=                   |
| readline      | =INPUTRC=                     |
| ksh           | =ENV=                         |
| zsh           | =ZDOTDIR=                     |
| dialog        | =DIALOGRC=                    |
| mail          | =MAIL=                        |
| shell-history | =HISTFILE=                    |
| xauth         | =XAUTHORITY=                  |
| python        | =PYTHONPATH= =PYTHONUSERBASE= |

You should definitely set most of the XDG env vars [3] because a surprising amount
of software respects these. Out of all the XDG env vars, the most important
(from our angle) are =XDG_CONFIG_HOME=, =XDG_CACHE_HOME=, =XDG_DATA_HOME=.

There is one slight problem with this though. Setting a lot of env vars tend to
clutter the profile file which may or may not be relevant to you.
** About shells
Shellrcs are always a pain in the neck because every one of them will have to rely
on a standard path for their config and profile. So shellrc paths cannot be changed,
at least as far as I know, just by merely exporting an env var.

To change these paths, you will need to patch the shell's source. This is a lot easier
than you might think. Usually, you can find the file in which the shellrc and profile
location are declared with a simple =grep= command. And then change these and compile
them.

NOTE:
- If you're a mksh user, when you compile, you can change the MKSHRC_PATH definition
- If you're a zsh user, you can set =ZDOTDIR= in =/etc/zsh/zshenv= [4]
* Workarounds
These are merely workarounds and should be avoided whenever possible
but still these are worth it as a last ditch effort when the software
that creates these pesky dotfiles is proprietary.

This is what I do for Java and Minecraft (and for some browsers because
it takes ages to change the directory in the source code).
** How to do it
As said before, this is a workaround and should be avoided as much as possible.
To achieve this, you will be creating a user so that all the dotfiles will be
dumped into that user's home directory so that your home directory will be uncluttered.
This is easier said than done though because launching the application might be a bit
difficult so you might have to configure sudo (or doas) to launch a wrapper as that
user without needing to type the password.
** Bright side
On the bright side, not really every software needs the previously mentioned workaround.
In fact, from my experience, only two software needed this (and those have been mentioned
at the start of the previous section). A much simpler way to execute this would be to
simply write a wrapper script like the following. In the example, I will be using Firefox.
#+BEGIN_SRC sh
#!/bin/sh
HOME=${HOME}/some_other_dir firefox
#+END_SRC
Whenever you launch firefox via this wrapper, all the dotfiles will go to
=${HOME}/some_other_dir= instead of =${HOME}=.

NOTE: This is one of the simplest way to unclutter your home directory.
* Bruteforcing
What if the software you're using doesn't have an env var and you don't want to use
ugly workarounds? Well, you can patch the software if the source is available. Patching
software (especially when you're simply changing a variable) is a lot easier than you
might think. Sometimes, you wouldn't even have the need to change the source code because
some software allows the user to set the configuration path (or whatever else) to be set
on compilation time. So instead of changing the source code, you would merely change a
variable in the Makefile.

You can find the patches that I made for various software (mksh, emacs, dosbox) to change
the configuration (or whatever else) path here -
https://github.com/vizs/home/tree/master/etc/prog.d/patches
** A rough outline on the process
Usually, =grep= and a bit of time is all you need to change the path. Most likely, all
you need to do is search for a typical string like =.software= in every file in the
source directory and change it (and make a patch). You can do this by simply running
=grep -R '\.software' *= (assuming you're in the source directory). Then using your
favorite editor, change the necessary lines.
* Before and Aftek
* References
[1] http://xahlee.info/UnixResource_dir/writ/unix_origin_of_dot_filename.html

[2] https://sourceforge.net/projects/larswm/

[3] https://specifications.freedesktop.org/basedir-spec/latest/ar01s03.html

[4] https://github.com/vizs/declutter-home/issues/1
